name: Preprod deployment

on:
  push:
    branches:
      - main

jobs:
  preprod-agent-deployment:
    name: Build and upload agent
    runs-on: ubuntu-latest
    container: golang:1.20
    env:
      BASE_NAME: spacelift-vcs-agent
      BIN_DIR: build
    permissions:
      id-token: write
      contents: read
      deployments: write

    steps:
      - name: Check out repository code
        uses: actions/checkout@master

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: eu-west-1
          role-to-assume: ${{ secrets.PREPROD_AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900

      - uses: chrnorm/deployment-action@releases/v1
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{ github.token }}"
          target_url: https://downloads.spacelift.dev/spacelift-vcs-agent
          environment: preprod/vcs-agent

      - name: parse short SHA
        id: vars
        run: |
          echo ::set-output name=sha::$(git rev-parse --short=8 ${{ github.sha }})

      - name: Build Spacelift VCS Agent
        run: go build -a -tags netgo -ldflags "-s -w -extldflags '-static' -X main.VERSION=$SHORT_SHA -X main.BugsnagAPIKey=$BUGSNAG_API_KEY" -trimpath -o $BIN_DIR/$BASE_NAME ./cmd/spacelift-vcs-agent
        env:
          BUGSNAG_API_KEY: ${{ secrets.PREPROD_BUGSNAG_API_KEY }}
          CGO_ENABLED: 0
          SHORT_SHA: ${{ steps.vars.outputs.sha }}

      - name: Install dependencies
        run: |
          apt-get update -y
          apt-get install -y awscli zip

      - name: Import the PGP key
        run: |
          echo ${GPG_KEY_BASE64} | base64 -d > spacelift.gpg
          gpg --import \
            --passphrase=$GPG_PASSPHRASE \
            --pinentry-mode=loopback \
            spacelift.gpg
          rm spacelift.gpg
        env:
          GPG_KEY_BASE64: ${{ secrets.GPG_KEY_BASE64 }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Sign Spacelift VCS Agent Binary
        run: ./scripts/sign.sh $BIN_DIR $BASE_NAME
        env:
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          SHORT_SHA: ${{ steps.vars.outputs.sha }}

      - name: Verify Checksum Spacelift VCS Agent Binary
        run: ./scripts/verify.sh $BIN_DIR $BASE_NAME
        env:
          SHORT_SHA: ${{ steps.vars.outputs.sha }}

      - name: Upload the VCS Agent binary to downloads.spacelift.dev
        run: >-
          aws s3 sync
          ${BIN_DIR} s3://${{ secrets.PREPROD_AWS_S3_BUCKET }}/
          --no-progress

      - name: Invalidate downloads.spacelift.dev cache
        run: >-
          aws cloudfront create-invalidation
          --distribution-id ${{ secrets.PREPROD_DISTRIBUTION }}
          --paths "/*"

      - name: Update deployment status (success)
        uses: chrnorm/deployment-status@releases/v1
        if: success()
        with:
          token: "${{ github.token }}"
          target_url: https://downloads.spacelift.dev/spacelift-vcs-agent
          state: "success"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status (failure)
        uses: chrnorm/deployment-status@releases/v1
        if: failure()
        with:
          token: "${{ github.token }}"
          target_url: https://downloads.spacelift.dev/spacelift-vcs-agent
          state: "failure"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
